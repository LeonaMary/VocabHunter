/*
 * Open Source Software published under the Apache Licence, Version 2.0.
 */

import org.gradle.internal.os.OperatingSystem

ext {
    operatingSystem = OperatingSystem.current()
//    isIncludeMacExtensions = operatingSystem.isMacOsX()
    isIncludeMacExtensions = false
}

allprojects {
    group 'io.github.vocabhunter'
}

task wrapper(type: Wrapper) {
    description 'Setup the Gradle wrapper'
    gradleVersion = '4.6'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath 'net.researchgate:gradle-release:2.6.0'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2'
        classpath 'gradle.plugin.com.github.spotbugs:gradlePlugin:1.6.0'
    }
}

apply plugin: 'base'
apply plugin: 'net.researchgate.release'
apply plugin: 'org.sonarqube'

subprojects {

    apply plugin: 'java'
    apply plugin: 'pmd'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.ben-manes.versions'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
    }

    dependencies {
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.1.0'
        testCompile 'org.junit.jupiter:junit-jupiter-params:5.1.0'
        testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
        testCompile 'org.mockito:mockito-core:2.15.0'
        runtime 'ch.qos.logback:logback-classic:1.2.3'
    }

    test {
        useJUnitPlatform()
    }

    pmd {
        toolVersion = '6.1.0'
        ruleSetFiles = files("$rootProject.projectDir/config/pmd/ruleset.xml")
        ruleSets = []
    }

    checkstyle {
        toolVersion = '8.8'
        configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
    }

    [checkstyleMain, checkstyleTest].each { task ->
        task.logging.setLevel(LogLevel.LIFECYCLE)
    }

    spotbugs {
        toolVersion = '3.1.2'
        effort = 'max'
        reportLevel = 'medium'
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    jacoco {
        toolVersion = '0.8.0'
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco/report.xml")
        }
    }

    [compileJava, compileTestJava].each { task ->
        task.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
    }
}
